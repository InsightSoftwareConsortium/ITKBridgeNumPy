%begin %{
#include "PatchedPython27pyconfig.h"
%}

%extend itkPyBuffer@PyBufferTypes@{
    %pythoncode %{

    def GetArrayFromImage(image, keepAxes=False):
        """Get a NumPy array from a ITK Image.

        When *keepAxes* is *False*, the NumPy array will have C-order
        indexing. This is the reverse of how indices are specified in ITK,
        i.e. k,j,i versus i,j,k. However C-order indexing is expected by most
        algorithms in NumPy / SciPy.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        itksize = image.GetLargestPossibleRegion().GetSize()
        dim     = len(itksize)
        shape   = []
        for idx in range(dim):
            shape.append(int(itksize[idx]))

        if(image.GetNumberOfComponentsPerPixel() > 1):
            shape = [image.GetNumberOfComponentsPerPixel(), ] + shape

        if keepAxes == False:
            shape = shape[::-1]

        pixelType     = "@PixelType@"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyBuffer@PyBufferTypes@._GetArrayFromImage(image)
        itkndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(itkndarray)
        itkndarrview.SetConvertedFlag(converted = True)

        return itkndarrview

    GetArrayFromImage = staticmethod(GetArrayFromImage)

    def GetImageFromArray(ndarr, isVector=False):
        """Get an ITK Image from a NumPy array.

        If isVector is True, then a 3D array will be treated as a 2D vector image,
        otherwise it will be treated as a 3D image.

        If the array uses Fortran-order indexing, i.e. i,j,k, the Image Size
        will have the same dimensions as the array shape. If the array uses
        C-order indexing, i.e. k,j,i, the image Size will have the dimensions
        reversed from the array shape.

        Therefore, since the *numpy.transpose* operator on a 2D array simply
        inverts the indexing scheme, the Image representation will be the
        same for an array and its transpose. If flipping is desired, see
        *numpy.reshape*.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim in ( 2, 3, 4 ), \
            "Only arrays of 2, 3 or 4 dimensions are supported."

        if ( ndarr.ndim == 3 and isVector ) or (ndarr.ndim == 4):
            imgview = itkPyBuffer@PyBufferTypes@._GetImageFromArray( ndarr, ndarr.shape[-2::-1], ndarr.shape[-1] )
        elif ndarr.ndim in ( 2, 3 ):
            imgview = itkPyBuffer@PyBufferTypes@._GetImageFromArray( ndarr, ndarr.shape[::-1], 1)

        return imgview

    GetImageFromArray = staticmethod(GetImageFromArray)

  %}
};
